generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model Announcement {
  id      Int    @id @default(autoincrement())
  title   String
  date    String
  content String
}

model Introduction {
  id        Int    @id @default(autoincrement())
  content   String
  updatedAt String
}

model DisposableMaterial {
  id           Int     @id @default(autoincrement())
  name         String
  partName     String?
  category     String
  position     String
  description  String
  photoLink    String
  usage        Int
  tutorialLink String
  fee          Int?
  remain       Boolean
}

model Material {
  id           Int     @id @default(autoincrement())
  name         String
  partName     String?
  category     String
  valuable     Boolean
  position     String
  description  String
  photoLink    String
  usage        Int
  tutorialLink String
  fee          Int
  remain       Int
}

model Tool {
  id           Int     @id @default(autoincrement())
  name         String
  partName     String?
  category     String
  position     String
  description  String
  photoLink    String
  usage        Int
  tutorialLink String
  remain       Int
}

model Machine {
  id           Int     @id @default(autoincrement())
  name         String
  partName     String?
  category     String
  position     String
  description  String
  photoLink    String
  usage        Int
  tutorialLink String
}

model ThreeDP {
  id           Int     @id @default(autoincrement())
  name         String
  category     String
  position     String
  description  String
  photoLink    String
  usage        Int
  tutorialLink String
  waiting      User[]
  waitingId    Int[]
  broken       Boolean
}

model User {
  id                Int            @id @default(autoincrement())
  name              String
  studentID         String          @unique
  password          String
  photoLink         String?
  threeDPUse        ThreeDP?       @relation(fields: [threeDPId], references: [id])
  threeDPId         Int?
  laserCutAvailable Boolean        @default(false)
  borrowHistory     UserMaterial[]
  borrowHistoryId   Int[]
  articles          Article[]
  articlesId        Int[]
  isAdmin           Boolean        @default(false)
  isMinister        Boolean        @default(false)
}

model AuthorizedCode {
  id          Int     @id @default(autoincrement())
  codeList    String[]
  updatedAt   String
}

model UserMaterial {
  id         Int     @id @default(autoincrement())
  name       String
  partName   String?
  borrower   User    @relation(fields: [borrowerId], references: [id])
  borrowerId Int
  borrowNum  Int
  borrowDate String
  returnDate String?
  status     String
}

model Article {
  id          Int     @id @default(autoincrement())
  writer      User    @relation(fields: [writerId], references: [id])
  writerId    Int
  description String
  imageURL    String?
  time        String
  title       String
  headline    Boolean
  content     String
  userpic     String?
}
