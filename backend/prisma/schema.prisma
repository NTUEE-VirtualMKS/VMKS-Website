generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model Announcement {
  id      String    @id @default(uuid()) // TODO: string & uuid()
  title   String
  date    String
  content String
}

model DisposableMaterial {
  id           String     @id @default(uuid())
  name         String
  partName     String?
  category     String
  position     String
  description  String
  photoLink    String
  usage        Int
  tutorialLink String
  fee          Int?
  remain       Boolean
}

model Material {
  id                    String                  @id @default(uuid())
  name                  String
  partName              String?
  category              String
  valuable              Boolean
  position              String
  description           String
  photoLink             String
  usage                 Int
  tutorialLink          String?
  fee                   Int
  remain                Int
  materialLikes         MaterialLike[]
  materialLikeIds       String[]
  userBorrowMaterials   UserBorrowMaterial[]
  userBorrowMaterialIds String[]
}

model Tool {
  id                String              @id @default(uuid())
  name              String
  partName          String?
  category          String
  position          String
  description       String
  photoLink         String
  usage             Int
  tutorialLink      String
  remain            Int
  toolLikes         ToolLike[]
  toolLikeIds       String[]
  userBorrowTools   UserBorrowTool[]
  userBorrowToolIds String[]
}

model Machine {
  id           String     @id @default(uuid())
  name         String
  partName     String?
  category     String
  position     String
  description  String
  photoLink    String
  usage        Int
  tutorialLink String
}

model ThreeDP {
  id           String     @id @default(uuid())
  name         String
  category     String
  position     String
  description  String
  photoLink    String
  usage        Int
  tutorialLink String
  waiting      User[]
  waitingId    String[]
  broken       Boolean
}

model User {
  id                    String                 @id @default(uuid())
  name                  String
  studentID             String               @unique
  password              String
  photoLink             String?
  language              String               @default("en")
  threeDPUse            ThreeDP?             @relation(fields: [threeDPId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  threeDPId             String?
  laserCutAvailable     Boolean              @default(false)
  articles              Article[]
  articlesId            String[]
  isAdmin               Boolean              @default(false)
  isMinister            Boolean              @default(false)
  toolLikes             ToolLike[]
  toolLikeIds           String[]
  userBorrowTools       UserBorrowTool[]
  userBorrowToolIds     String[]
  materialLikes         MaterialLike[]
  materialLikeIds       String[]
  userBorrowMaterials   UserBorrowMaterial[]
  userBorrowMaterialIds String[]
}

model AuthorizedCode {
  id        String      @id @default(uuid())
  codeList  String[]
  updatedAt String
}

model Article {
  id          String     @id @default(uuid())
  writer      User    @relation(fields: [writerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  writerId    String
  description String
  imageURL    String?
  time        String
  title       String
  headline    Boolean
  content     String
  userpic     String?
}

model ToolLike {
  id     String  @id @default(uuid())
  tool   Tool @relation(fields: [toolId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  toolId String
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
}

model UserBorrowTool {
  id         String     @id @default(uuid())
  user       User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId     String
  tool       Tool    @relation(fields: [toolId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  toolId     String
  borrower   String
  studentId  String
  figure     String
  name       String
  partName   String?
  category   String
  remain     Int
  position   String
  quantity   Int
  status     String  @default("Unborrowed")
  borrowDate String  @default("")
  returnDate String  @default("")
}

model MaterialLike {
  id         String      @id @default(uuid())
  material   Material @relation(fields: [materialId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  materialId String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId     String
}

model UserBorrowMaterial {
  id         String      @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId     String
  material   Material @relation(fields: [materialId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  materialId String
  borrower   String
  studentId  String
  figure     String
  name       String
  partName   String?
  category   String
  remain     Int
  position   String
  quantity   Int
  status     String   @default("Unborrowed")
  borrowDate String   @default("")
  returnDate String   @default("")
}

model AdminSchedule {
  id     String    @id @default(uuid())
  admin  String
  day    String
  period String
}

model SignupAuthCode {
  id        String    @id @default(uuid())
  code      String
  studentID String
}
